{
  "swagger": "2.0",
  "info": {
    "version": "1.2.8",
    "title": "Yum Food Orders",
    "license": {
      "name": "GPLv3",
      "url": "http://www.gnu.org/licenses/"
    },
    "description": "**Yum application, order food daily from the best chef in town**\n\nThis API is used by the angular.io client, and is not meant to be used otherwise.\n\nFind source code of this API [here](https://github.com/jrtdev/yum)\n\nCopyright (C) 2017 JR Technologies.\n\n  \n------------------------------------\n\n    Last edit: 27/10/2017 11:00\n\n-------------------------------------\n"
  },
  "basePath": "/api",
  "schemes": [
    "http",
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "Bearer": {
      "description": "For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header.\nA valid JWT token is generated by the API and returned as answer of a call to the path /api/auth/login giving a valid user & password.\nThe following syntax must be used in the 'Authorization' header :\nBearer xxxxxx.yyyyyyy.zzzzzz\n",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Allow users to log in, and to receive a Token",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The email/password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login Success.",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "403": {
            "description": "User can not login (not approved)."
          },
          "404": {
            "description": "User not found (bad credentials)."
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Allow users to register",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The email/password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserReg"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration Success"
          },
          "400": {
            "description": "Bad registration data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "user already exists"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/auth/forgotpwd": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Remind password",
        "parameters": [
          {
            "in": "body",
            "name": "email",
            "description": "The email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reset password email sent"
          },
          "400": {
            "description": "Bad email",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/auth/changepwd": {
      "put": {
        "tags": [
          "auth"
        ],
        "description": "Allow users to reset password",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "token/password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPwd"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Password change Success"
          },
          "400": {
            "description": "Bad reset password data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/auth/privacy": {
      "get": {
        "tags": [
          "auth"
        ],
        "description": "get yum info",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Info"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/auth/method": {
      "get": {
        "tags": [
          "auth"
        ],
        "description": "get yum authentication method",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/refreshToken": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "description": "get refreshed token",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "refreshed token string",
            "schema": {
              "$ref": "#/definitions/Refresh"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/settings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "description": "get user settings",
        "responses": {
          "200": {
            "description": "User data",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "description": "set user data/settings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Settings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User data changed successfully"
          },
          "400": {
            "description": "Bad reset password data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Concurrent modification error",
            "schema": {
              "$ref": "#/definitions/UserSettings"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/settings/picture": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "summary": "Uploads profile pic.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": "Picture set"
          },
          "404": {
            "description": "no picture"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "summary": "deletes profile picture.",
        "responses": {
          "204": {
            "description": "Picture deleted"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/settings/picture/token": {
      "get": {
        "tags": [
          "hungry"
        ],
        "description": "Get profile picture.",
        "parameters": [
          {
            "name": "token",
            "description": "auth token",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "image/jpeg"
        ],
        "responses": {
          "200": {
            "description": "A jpeg file.",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Invalid token"
          },
          "404": {
            "description": "image not found"
          }
        }
      }
    },
    "/menus/weekly": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "summary": "Gets weekly menus",
        "description": "Returns a list containing all menus of the week.",
        "parameters": [
          {
            "in": "query",
            "name": "userid",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of daily menus",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DailyMenu"
              }
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/menus/weekly/{week}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "summary": "Gets weekly menu of the specified week",
        "description": "Returns a list containing all menus of the week.",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "week",
            "description": "ex. 02-2017",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of daily menus",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DailyMenu"
              }
            }
          },
          "400": {
            "description": "Weekly menu not found."
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/menus/monthly": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "summary": "Gets monthly menus.",
        "description": "Return a list containing all menus of the month.",
        "parameters": [
          {
            "in": "query",
            "name": "userid",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of daily menus.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DailyMenu"
              }
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/menus/monthly/{monthyear}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "summary": "Gets monthly menus of the specified month.",
        "description": "Returns a list containing all menus of the month.",
        "parameters": [
          {
            "name": "monthyear",
            "description": "ex. 12-2016",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of daily menus.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DailyMenu"
              }
            }
          },
          "400": {
            "description": "Monthly menu not found."
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "summary": "Place a new order",
        "description": "A new order for the specified daily menu",
        "parameters": [
          {
            "in": "query",
            "name": "userid",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order",
            "in": "body",
            "description": "The order to place",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order succesfully placed",
            "schema": {
              "$ref": "#/definitions/DailyMenu"
            }
          },
          "400": {
            "description": "Order couldn't have been placed."
          },
          "402": {
            "description": "Not enough balance."
          },
          "409": {
            "description": "Order already placed",
            "schema": {
              "$ref": "#/definitions/DailyMenu"
            }
          },
          "410": {
            "description": "Concurrent Order Deletion",
            "schema": {
              "$ref": "#/definitions/ConcurrentOrderDeletion"
            }
          },
          "412": {
            "description": "Deadline for orders passed"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "description": "Modify the order",
        "summary": "Get order for the specified day",
        "parameters": [
          {
            "in": "query",
            "name": "userid",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dailyMenuId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dailyMenuVersion",
            "in": "query",
            "required": true,
            "type": "integer"
          },
          {
            "name": "dailyMenuDate",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "Order succesfully retrieved",
            "schema": {
              "$ref": "#/definitions/DailyOrder"
            }
          },
          "404": {
            "description": "Order not found"
          },
          "410": {
            "description": "Concurrent Order Deletion",
            "schema": {
              "$ref": "#/definitions/ConcurrentOrderDeletion"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "summary": "Modifies order for the specified day",
        "description": "Modify the order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "userid",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "UpdateOrderItems",
            "in": "body",
            "description": "The order items to modify",
            "schema": {
              "properties": {
                "dailyMenuId": {
                  "type": "integer",
                  "format": "int64"
                },
                "dailyMenuVersion": {
                  "type": "integer"
                },
                "dailyMenuDate": {
                  "type": "string",
                  "format": "date"
                },
                "comment": {
                  "type": "string",
                  "maxLength": 150
                },
                "orderItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/OrderItem"
                  }
                },
                "emailRequest": {
                  "type": "boolean"
                },
                "lastEdit": {
                  "$ref": "#/definitions/LastEdit"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order succesfully modified",
            "schema": {
              "$ref": "#/definitions/OrderUpdate"
            }
          },
          "304": {
            "description": "Unmodified data"
          },
          "400": {
            "description": "Order couldn't be modified."
          },
          "402": {
            "description": "Not enough balance."
          },
          "404": {
            "description": "Order not found (id)"
          },
          "409": {
            "description": "Concurrent modification error",
            "schema": {
              "$ref": "#/definitions/DailyOrder"
            }
          },
          "410": {
            "description": "Concurrent Order Deletion",
            "schema": {
              "$ref": "#/definitions/ConcurrentOrderDeletion"
            }
          },
          "412": {
            "description": "Deadline for orders passed"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "summary": "Deletes specified order",
        "description": "Deletes the order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "userid",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "DailyMenuDetails",
            "in": "body",
            "description": "dailymenu details id, version, date",
            "schema": {
              "properties": {
                "dailyMenuId": {
                  "type": "integer",
                  "format": "int64"
                },
                "dailyMenuVersion": {
                  "type": "integer"
                },
                "dailyMenuDate": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order succesfully deleted",
            "schema": {
              "$ref": "#/definitions/OrderUpdate"
            }
          },
          "400": {
            "description": "Order couldn't be deleted."
          },
          "404": {
            "description": "Order not found (id)."
          },
          "410": {
            "description": "Concurrent Order Deletion",
            "schema": {
              "$ref": "#/definitions/ConcurrentOrderDeletion"
            }
          },
          "412": {
            "description": "Deadline for orders passed"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/foods": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Gets all foods, optionally return stats per food",
        "description": "Return a list of all foods",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "stats",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Request pagination page",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "size",
            "description": "Request pagination size / num of foods",
            "required": false,
            "type": "string"
          },
          {
            "name": "foodType",
            "in": "query",
            "description": "Request foodType filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Request archived filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Request orderBy filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderDirection",
            "in": "query",
            "description": "Request orderBy filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of foods",
            "schema": {
              "$ref": "#/definitions/FoodsPage"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "A new food",
        "description": "Create a food with basic data",
        "parameters": [
          {
            "name": "foodDetails",
            "in": "body",
            "description": "The food to save",
            "schema": {
              "properties": {
                "foodName": {
                  "type": "string"
                },
                "foodType": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "price": {
                  "type": "number",
                  "format": "double"
                },
                "standard": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Food succesfully created"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "412": {
            "description": "Food name already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/foods/findByName/{name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Get food by name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Food found",
            "schema": {
              "$ref": "#/definitions/Food"
            }
          },
          "404": {
            "description": "Food not found"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/foods/{foodId}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Get food by id, optionally check if editable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "foodId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "editable",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Food get ok",
            "schema": {
              "$ref": "#/definitions/FoodEditable"
            }
          },
          "404": {
            "description": "Food not found"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Updates an existing food",
        "description": "Chef can update food name, type, description or price",
        "parameters": [
          {
            "in": "path",
            "name": "foodId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "clone",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "food",
            "in": "body",
            "description": "The food to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditedFood"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/MessageResponse"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "description": "Food not found"
          },
          "409": {
            "description": "Concurrent modification error",
            "schema": {
              "$ref": "#/definitions/EditedFood"
            }
          },
          "412": {
            "description": "Food name already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Deletes an existing food",
        "description": "Chef can update food name, type, description or price",
        "parameters": [
          {
            "in": "path",
            "name": "foodId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "archive",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Food successfully archived"
          },
          "204": {
            "description": "Food successfully deleted"
          },
          "404": {
            "description": "Food not found"
          },
          "412": {
            "description": "Food couldn't be deleted"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/dailyMenus/monthly": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Gets all dailyMenus",
        "description": "Return a list of all dailyMenus",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of dailyMenus",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DailyMenuChef"
              }
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/dailyMenus/monthly/{monthyear}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Get dailyMenus by month",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "ex. 02-2017",
            "name": "monthyear",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Month's dailyMenus found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DailyMenuChef"
              }
            }
          },
          "400": {
            "description": "Month's dailyMenus not found"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/dailyMenus/{id}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Get dailyMenus by month",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "dailyMenu",
            "in": "body",
            "description": "The daily menu to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DailyMenuEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "daily menu updated ok",
            "schema": {
              "$ref": "#/definitions/LastEdit"
            }
          },
          "204": {
            "description": "daily menu deleted"
          },
          "404": {
            "description": "daily menu not found"
          },
          "409": {
            "description": "Concurrent modification error",
            "schema": {
              "$ref": "#/definitions/DailyMenuEdit"
            }
          },
          "412": {
            "description": "can't modify menus older than yesterday"
          },
          "417": {
            "description": "The request is failed because there are orders on the food",
            "schema": {
              "$ref": "#/definitions/Food"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete menu and orders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Daily menu deleted"
          },
          "412": {
            "description": "Deadline passed"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/dailyMenus": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "New daily menu",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "newDailyMenu",
            "in": "body",
            "description": "A new daily menu",
            "required": true,
            "schema": {
              "properties": {
                "foods": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "foodId": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "date": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "new daily menu ok",
            "schema": {
              "$ref": "#/definitions/DailyMenuChef"
            }
          },
          "400": {
            "description": "daily menu bad data"
          },
          "409": {
            "description": "new daily menu ok",
            "schema": {
              "$ref": "#/definitions/DailyMenuChef"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/orders/monthly": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Get a summary of orders by month",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Month's summary of orders",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DailyMenuOrder"
              }
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/orders/monthly/{monthyear}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Get a summary of orders by month",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "monthyear",
            "description": "ex 02-2017",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Month's summary of orders",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DailyMenuOrder"
              }
            }
          },
          "400": {
            "description": "not valid request"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/orders/daily/{day}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Get daily orders summary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "day",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "Daily order",
            "schema": {
              "$ref": "#/definitions/DailyOrderSummary"
            }
          },
          "400": {
            "description": "bad request"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/report/{day}": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "chef"
        ],
        "summary": "Send email with daily summary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "day",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Email sent"
          },
          "400": {
            "description": "bad request"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get users",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Request pagination page",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "size",
            "description": "Request pagination size / num of users",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Request orderBy filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderDirection",
            "in": "query",
            "description": "Request orderBy filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Request search term",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get User list ok",
            "schema": {
              "$ref": "#/definitions/UsersPage"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "creates a new user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user to save",
            "schema": {
              "$ref": "#/definitions/UserReg"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User Created Successfully"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "412": {
            "description": "user already exists"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get user by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Updates an existing user",
        "description": "Admin can update user data EXCEPT password. Can only initiate a pass reset.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "user",
            "in": "body",
            "description": "The user data to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully updated",
            "schema": {
              "$ref": "#/definitions/LastEdit"
            }
          },
          "400": {
            "description": "User couldn't be updated"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Concurrent modification error",
            "schema": {
              "$ref": "#/definitions/UserSettings"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Deletes an existing user",
        "description": " ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted"
          },
          "400": {
            "description": "User couldn't be deleted"
          },
          "402": {
            "description": "Mix final orders"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Only not final orders"
          },
          "412": {
            "description": "Only final orders"
          }
        }
      }
    },
    "/users/{id}/picture": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Uploads a file.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "description": "The file to upload"
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "user id"
          }
        ],
        "responses": {
          "200": {
            "description": "Picture set"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "deletes profile picture.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "user id"
          }
        ],
        "responses": {
          "204": {
            "description": "Picture deleted."
          },
          "404": {
            "description": "no picture"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/users/{id}/picture/token": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get profile picture.",
        "parameters": [
          {
            "name": "token",
            "description": "auth token",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int64",
            "required": true,
            "description": "user id"
          }
        ],
        "produces": [
          "image/jpeg"
        ],
        "responses": {
          "200": {
            "description": "A jpeg file.",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Invalid token"
          },
          "404": {
            "description": "image not found"
          }
        }
      }
    },
    "/users/{id}/forgotpwd": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "initiate pass reset",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/MessageResponse"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/users/{id}/approve": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "Change approve status of user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "approve",
            "description": "Approve or disapprove",
            "required": true,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Force disapprove user",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "not found"
          },
          "409": {
            "description": "Non-final orders found"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/globalsettings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "get global settings",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/GlobalSettings"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "set global settings",
        "parameters": [
          {
            "name": "settings",
            "in": "body",
            "description": "The global settings to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GlobalSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "settings saved"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "409": {
            "description": "Concurrent modification error",
            "schema": {
              "$ref": "#/definitions/GlobalSettings"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/globalsettings/holidays/{year}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "get holidays by year",
        "parameters": [
          {
            "in": "path",
            "name": "year",
            "required": true,
            "type": "integer",
            "format": "int32",
            "minimum": 2000,
            "maximum": 2100
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Holidays"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "set holidays by year",
        "parameters": [
          {
            "in": "path",
            "name": "year",
            "required": true,
            "type": "integer",
            "format": "int32",
            "minimum": 2000,
            "maximum": 2100
          },
          {
            "name": "holidays",
            "in": "body",
            "description": "The holidays to set",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Holidays"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "holidays saved"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "409": {
            "description": "Concurrent modification error",
            "schema": {
              "$ref": "#/definitions/Holidays"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/balance/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "description": "Get user's balance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "number",
              "format": "int64"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "Update user's balance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "deposit",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Deposit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "number",
              "format": "int64"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Balance already modified",
            "schema": {
              "type": "number",
              "format": "int64"
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "hungry"
        ],
        "description": "Get user's transactions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    }
  },
  "definitions": {
    "DailyOrder": {
      "type": "object",
      "description": "A single order DTO",
      "properties": {
        "foods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FoodWithQuantity"
          }
        },
        "dailyMenuDate": {
          "type": "string",
          "format": "date"
        },
        "comment": {
          "type": "string",
          "maxLength": 150
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "User": {
      "type": "object",
      "description": "User DTO",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "registrationDate": {
          "type": "string",
          "format": "date"
        },
        "approved": {
          "type": "boolean"
        },
        "hasPicture": {
          "type": "boolean"
        },
        "balance": {
          "type": "number",
          "format": "int64"
        },
        "orderNtf": {
          "type": "boolean"
        },
        "orderModifyNtf": {
          "type": "boolean"
        },
        "adminOrderNtf": {
          "type": "boolean"
        },
        "adminOrderModifyNtf": {
          "type": "boolean"
        },
        "balanceNtf": {
          "type": "boolean"
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "UsersPage": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Settings": {
      "type": "object",
      "description": "User DTO",
      "properties": {
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "orderNtf": {
          "type": "boolean"
        },
        "orderModifyNtf": {
          "type": "boolean"
        },
        "adminOrderNtf": {
          "type": "boolean"
        },
        "adminOrderModifyNtf": {
          "type": "boolean"
        },
        "balanceNtf": {
          "type": "boolean"
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "UserSettings": {
      "type": "object",
      "description": "User DTO",
      "properties": {
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "orderNtf": {
          "type": "boolean"
        },
        "orderModifyNtf": {
          "type": "boolean"
        },
        "adminOrderNtf": {
          "type": "boolean"
        },
        "adminOrderModifyNtf": {
          "type": "boolean"
        },
        "balanceNtf": {
          "type": "boolean"
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "UserReg": {
      "type": "object",
      "description": "User DTO",
      "properties": {
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "Login": {
      "type": "object",
      "description": "Login credentials DTO",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ResetPwd": {
      "type": "object",
      "description": "Token and password",
      "properties": {
        "token": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Token": {
      "type": "object",
      "description": "auth token",
      "properties": {
        "token": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Refresh": {
      "type": "object",
      "description": "auth token",
      "properties": {
        "token": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "An error with some info DTO",
      "properties": {
        "message": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "FoodsPage": {
      "type": "object",
      "properties": {
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "foods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FoodWithStats"
          }
        }
      }
    },
    "FoodWithStats": {
      "type": "object",
      "description": "Food, statistics  included DTO",
      "properties": {
        "foodItem": {
          "$ref": "#/definitions/Food"
        },
        "stats": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Statistic"
          }
        },
        "editable": {
          "type": "boolean"
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "FoodWithQuantity": {
      "type": "object",
      "description": "Food with quantity",
      "properties": {
        "food": {
          "$ref": "#/definitions/Food"
        },
        "quantity": {
          "type": "integer"
        }
      }
    },
    "FoodEditable": {
      "type": "object",
      "description": "Food,  checked if editable",
      "properties": {
        "foodItem": {
          "$ref": "#/definitions/Food"
        },
        "editable": {
          "type": "boolean"
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "Statistic": {
      "type": "object",
      "description": "Food statistics",
      "properties": {
        "week": {
          "type": "integer",
          "format": "int32"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EditedFood": {
      "properties": {
        "foodName": {
          "type": "string"
        },
        "foodType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "standard": {
          "type": "boolean"
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "Food": {
      "type": "object",
      "description": "Food DTO",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "foodName": {
          "type": "string"
        },
        "foodType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "archived": {
          "type": "boolean"
        },
        "standard": {
          "type": "boolean"
        }
      }
    },
    "DailyMenu": {
      "type": "object",
      "description": "A daily Menu,  has order checked DTO",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "orderId": {
          "type": "integer",
          "format": "int64"
        },
        "isFinal": {
          "type": "boolean"
        },
        "lastOrderDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "comment": {
          "type": "string",
          "maxLength": 150
        },
        "foods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FoodWithQuantity"
          }
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        },
        "balance": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "OrderUpdate": {
      "type": "object",
      "description": "Order last edit and user balance",
      "properties": {
        "balance": {
          "type": "number",
          "format": "int64"
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "DailyMenuChef": {
      "type": "object",
      "description": "A daily Menu,  has order checked DTO",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "foods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderItem"
          }
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "DailyMenuEdit": {
      "properties": {
        "foods": {
          "type": "array",
          "items": {
            "properties": {
              "foodId": {
                "type": "integer"
              }
            }
          }
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "OrderItem": {
      "type": "object",
      "description": "An order item, food & qty DTO",
      "required": [
        "foodId"
      ],
      "properties": {
        "quantity": {
          "type": "integer"
        },
        "foodId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Order": {
      "type": "object",
      "description": "An order DTO",
      "properties": {
        "dailyMenuId": {
          "type": "integer",
          "format": "int64"
        },
        "dailyMenuDate": {
          "type": "string",
          "format": "date"
        },
        "menuVersion": {
          "type": "integer"
        },
        "emailRequest": {
          "type": "boolean"
        },
        "OrderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderItem"
          }
        },
        "comment": {
          "type": "string",
          "maxLength": 150
        }
      }
    },
    "DailyOrderSummary": {
      "type": "object",
      "description": "Daily order summary DTO",
      "properties": {
        "date": {
          "type": "string",
          "format": "date"
        },
        "orderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderItem"
          }
        },
        "userOrders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserOrder"
          }
        }
      }
    },
    "DailyMenuOrder": {
      "type": "object",
      "description": "Daily order summary DTO",
      "properties": {
        "orderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderItem"
          }
        },
        "dailyMenuDate": {
          "type": "string",
          "format": "date"
        },
        "dailyMenuId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserOrder": {
      "type": "object",
      "description": "User order DTO",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "total": {
          "type": "number",
          "format": "double"
        },
        "comment": {
          "type": "string",
          "maxLength": 150
        },
        "orderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderItem"
          }
        }
      }
    },
    "GlobalSettings": {
      "type": "object",
      "description": "Global Settings DTO",
      "properties": {
        "deadline": {
          "type": "string"
        },
        "deadlineDays": {
          "type": "integer",
          "format": "int32"
        },
        "currency": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "tos": {
          "type": "string"
        },
        "policy": {
          "type": "string"
        },
        "reportEmail": {
          "type": "string"
        },
        "workingDays": {
          "type": "string"
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "Holidays": {
      "type": "array",
      "description": "Bank holidays",
      "items": {
        "type": "string",
        "format": "date"
      }
    },
    "Info": {
      "type": "object",
      "description": "yum info",
      "properties": {
        "tos": {
          "type": "string"
        },
        "policy": {
          "type": "string"
        },
        "lastEdit": {
          "$ref": "#/definitions/LastEdit"
        }
      }
    },
    "LastEdit": {
      "type": "object",
      "description": "Last edit DTO",
      "properties": {
        "timeStamp": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "number"
        }
      }
    },
    "Message": {
      "type": "object",
      "description": "A custom message.",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "ConcurrentOrderDeletion": {
      "type": "object",
      "description": "Concurrent Deletion returns error and dto",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        },
        "dailyMenu": {
          "$ref": "#/definitions/DailyMenu"
        }
      }
    },
    "Deposit": {
      "type": "object",
      "description": "Deposit amount and balance",
      "properties": {
        "amount": {
          "type": "number",
          "format": "int64"
        },
        "balance": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "Transaction": {
      "type": "object",
      "description": "Transaction with balance",
      "properties": {
        "amount": {
          "type": "number",
          "format": "int64"
        },
        "balance": {
          "type": "number",
          "format": "int64"
        },
        "datetime": {
          "type": "string",
          "format": "date-time"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "menuDate": {
          "type": "string",
          "format": "date"
        },
        "orderType": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "Error": {
      "description": "An unexpected error occured.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "MessageResponse": {
      "description": "A custom message.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    }
  }
}